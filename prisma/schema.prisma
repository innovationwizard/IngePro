// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model People {
  id        String       @id @default(cuid()) @map("id")
  email     String       @unique @map("email")
  name      String       @map("name")
  password  String?      @map("password") // Optional password field for authentication
  role      Role         @default(WORKER) @map("role")
  // Person is permanent - no deletion, only status changes
  status    PersonStatus @default(ACTIVE) @map("status")
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  personTenants     PersonTenants[]
  personTeams       PersonTeams[]
  personProjects    PersonProjects[]
  workLogs          WorkLogs[]
  workerAssignments TaskWorkerAssignments[]
  progressUpdates   TaskProgressUpdates[]
  locationUpdates   LocationUpdates[]
  worklogEntries    WorklogEntries[]

  // Audit trail
  auditLogs AuditLogs[]
  company   Companies?  @relation(fields: [companyId], references: [id])
  companyId String?     @map("company_id")

  @@map("people")
}

model Companies {
  id        String        @id @default(cuid()) @map("id")
  name      String        @map("name")
  nameEs    String?       @map("name_es")
  slug      String        @unique @map("slug") // ADD THIS LINE
  status    CompanyStatus @default(ACTIVE) @map("status")
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations (keep existing)
  people        People[]
  projects      Projects[]
  workLogs      WorkLogs[]
  teams         Teams[]
  personTenants PersonTenants[]

  @@map("companies")
}

model Teams {
  id          String     @id @default(cuid()) @map("id")
  name        String     @map("name")
  nameEs      String?    @map("name_es") // Spanish team name
  description String?    @map("description")
  companyId   String     @map("company_id")
  company     Companies  @relation(fields: [companyId], references: [id])
  status      TeamStatus @default(ACTIVE) @map("status")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  people   PersonTeams[]
  projects ProjectTeams[]

  @@map("teams")
}

model Projects {
  id            String        @id @default(cuid()) @map("id")
  name          String        @map("name")
  nameEs        String?       @map("name_es") // Spanish project name
  description   String?       @map("description")
  descriptionEs String?       @map("description_es") // Spanish project description
  companyId     String        @map("company_id")
  company       Companies     @relation(fields: [companyId], references: [id])
  status        ProjectStatus @default(ACTIVE) @map("status")
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  people               PersonProjects[]
  teams                ProjectTeams[]
  workLogs             WorkLogs[]
  taskAssignments      TaskProjectAssignments[]
  workerAssignments    TaskWorkerAssignments[]
  materials            ProjectMaterials[]
  progressUpdates      TaskProgressUpdates[]
  materialConsumptions MaterialConsumptions[]
  worklogEntries       WorklogEntries[]

  @@map("projects")
}

// Junction table for Person-Company relationships with time tracking
model PersonTenants {
  id        String    @id @default(cuid()) @map("id")
  personId  String    @map("person_id")
  person    People    @relation(fields: [personId], references: [id], onDelete: Cascade)
  companyId String    @map("company_id")
  company   Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Time tracking
  startDate DateTime  @default(now()) @map("start_date") @db.Timestamptz(6)
  endDate   DateTime? @map("end_date") @db.Timestamptz(6) // null = currently active

  // Status
  status PersonTenantStatus @default(ACTIVE) @map("status")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([personId, companyId, startDate])
  @@index([personId])
  @@index([companyId])
  @@map("person_tenants")
}

// Junction table for Person-Team relationships
model PersonTeams {
  id       String @id @default(cuid()) @map("id")
  personId String @map("person_id")
  person   People @relation(fields: [personId], references: [id], onDelete: Cascade)
  teamId   String @map("team_id")
  team     Teams  @relation(fields: [teamId], references: [id], onDelete: Cascade)

  // Time tracking
  startDate DateTime  @default(now()) @map("start_date") @db.Timestamptz(6)
  endDate   DateTime? @map("end_date") @db.Timestamptz(6) // null = currently active

  // Status
  status PersonTeamStatus @default(ACTIVE) @map("status")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([personId, teamId, startDate])
  @@index([personId])
  @@index([teamId])
  @@map("person_teams")
}

// Junction table for Person-Project relationships
model PersonProjects {
  id        String   @id @default(cuid()) @map("id")
  personId  String   @map("person_id")
  person    People   @relation(fields: [personId], references: [id], onDelete: Cascade)
  projectId String   @map("project_id")
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Time tracking
  startDate DateTime  @default(now()) @map("start_date") @db.Timestamptz(6)
  endDate   DateTime? @map("end_date") @db.Timestamptz(6) // null = currently active

  // Status
  status PersonProjectStatus @default(ACTIVE) @map("status")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([personId, projectId, startDate])
  @@index([personId])
  @@index([projectId])
  @@map("person_projects")
}

// Junction table for Project-Team relationships
model ProjectTeams {
  id        String   @id @default(cuid()) @map("id")
  projectId String   @map("project_id")
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  teamId    String   @map("team_id")
  team      Teams    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([projectId, teamId])
  @@index([projectId])
  @@index([teamId])
  @@map("project_teams")
}

model WorkLogs {
  id        String   @id @default(cuid()) @map("id")
  personId  String   @map("person_id")
  person    People   @relation(fields: [personId], references: [id], onDelete: Restrict)
  projectId String   @map("project_id")
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Restrict)

  // Original fields
  clockIn        DateTime   @map("clock_in") @db.Timestamptz(6)
  clockOut       DateTime?  @map("clock_out") @db.Timestamptz(6)
  location       String?    @map("location") // GPS coordinates
  tasksCompleted Json       @map("tasks_completed") // JSON array of tasks
  materialsUsed  Json       @map("materials_used") // JSON array of materials
  photos         String[]   @map("photos") // Array of photo URLs
  notes          String?    @map("notes")
  notesEs        String?    @map("notes_es") // Spanish notes
  approved       Boolean    @default(false) @map("approved")
  approvedBy     String?    @map("approved_by")
  approvedAt     DateTime?  @map("approved_at") @db.Timestamptz(6)
  createdAt      DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)
  company        Companies? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId      String?    @map("company_id")

  // Relationships
  entries WorklogEntries[]

  @@index([personId])
  @@index([projectId])
  @@index([companyId])
  @@map("work_logs")
}

// Detailed worklog entries for granular work tracking
model WorklogEntries {
  id                String   @id @default(cuid()) @map("id")
  worklogId         String   @map("worklog_id")
  worklog           WorkLogs @relation(fields: [worklogId], references: [id], onDelete: Cascade)
  personId          String   @map("person_id")
  person            People   @relation(fields: [personId], references: [id], onDelete: Restrict)
  projectId         String   @map("project_id")
  project           Projects @relation(fields: [projectId], references: [id], onDelete: Restrict)
  taskId            String?  @map("task_id")
  task              Tasks?   @relation(fields: [taskId], references: [id], onDelete: SetNull)
  description       String   @map("description")
  timeSpent         Int      @default(0) @map("time_spent") // Minutes
  notes             String?  @map("notes")
  locationLatitude  Float?   @map("location_latitude")
  locationLongitude Float?   @map("location_longitude")
  locationAccuracy  Float?   @map("location_accuracy")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  materialUsage WorklogMaterialUsage[]
  photos       WorklogPhotos[]

  @@index([worklogId])
  @@index([personId])
  @@index([projectId])
  @@index([taskId])
  @@map("worklog_entries")
}

// Material usage tracking for worklog entries
model WorklogMaterialUsage {
  id         String   @id @default(cuid()) @map("id")
  entryId    String   @map("entry_id")
  entry      WorklogEntries @relation(fields: [entryId], references: [id], onDelete: Cascade)
  materialId String   @map("material_id")
  material   Materials @relation(fields: [materialId], references: [id], onDelete: Restrict)
  quantity   Float    @map("quantity")
  unit       String   @map("unit")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([entryId])
  @@index([materialId])
  @@map("worklog_material_usage")
}

// Photo documentation for worklog entries
model WorklogPhotos {
  id         String   @id @default(cuid()) @map("id")
  entryId    String   @map("entry_id")
  entry      WorklogEntries @relation(fields: [entryId], references: [id], onDelete: Cascade)
  url        String   @map("url")
  caption    String?  @map("caption")
  timestamp  DateTime @map("timestamp") @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([entryId])
  @@map("worklog_photos")
}

// Location tracking for workers
model LocationUpdates {
  id            String   @id @default(cuid()) @map("id")
  personId      String   @unique @map("person_id") // One location per person
  person        People   @relation(fields: [personId], references: [id], onDelete: Cascade)
  latitude      Float    @map("latitude")
  longitude     Float    @map("longitude")
  accuracy      Float?   @map("accuracy")
  timestamp     DateTime @map("timestamp") @db.Timestamptz(6)
  deltaDistance Float?   @map("delta_distance") // Distance from last position in meters
  deltaHeading  Float?   @map("delta_heading") // Heading change in degrees
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("location_updates")
}

// Audit trail for all changes
model AuditLogs {
  id         String   @id @default(cuid()) @map("id")
  personId   String   @map("person_id")
  person     People   @relation(fields: [personId], references: [id], onDelete: Restrict)
  action     String   @map("action") // CREATE, UPDATE, DELETE, ASSIGN, UNASSIGN
  entityType String   @map("entity_type") // PERSON, COMPANY, TEAM, PROJECT, etc.
  entityId   String   @map("entity_id")
  oldValues  Json?    @map("old_values") // JSON of old values
  newValues  Json?    @map("new_values") // JSON of new values
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("audit_logs")
}

enum Role {
  WORKER
  SUPERVISOR
  ADMIN
  SUPERUSER
}

enum PersonStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum TeamStatus {
  ACTIVE
  INACTIVE
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum PersonTenantStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum PersonTeamStatus {
  ACTIVE
  INACTIVE
}

enum PersonProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

// Universal Task Management Models (no company/project dependencies)
model TaskCategories {
  id          String             @id @default(cuid()) @map("id")
  name        String             @map("name") // e.g., "Sello de juntas"
  nameEs      String?            @map("name_es") // Spanish name
  description String?            @map("description")
  status      TaskCategoryStatus @default(ACTIVE) @map("status")
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  tasks Tasks[]

  @@map("task_categories")
}

model Tasks {
  id          String          @id @default(cuid()) @map("id")
  name        String          @map("name") // Universal task name
  description String?         @map("description")
  categoryId  String?         @map("category_id")
  category    TaskCategories? @relation(fields: [categoryId], references: [id])

  // Progress tracking
  progressUnit String @map("progress_unit") // e.g., "linear meters", "square meters", "units"

  // Universal tasks have no status - they just exist

  // Assignment relationships
  projectAssignments TaskProjectAssignments[]
  workerAssignments  TaskWorkerAssignments[]

  // Progress updates
  progressUpdates TaskProgressUpdates[]

  // Worklog entries
  worklogEntries WorklogEntries[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("tasks")
}

model TaskProgressUpdates {
  id           String                @id @default(cuid()) @map("id")
  taskId       String                @map("task_id")
  task         Tasks                 @relation(fields: [taskId], references: [id], onDelete: Restrict)
  projectId    String                @map("project_id")
  project      Projects              @relation(fields: [projectId], references: [id], onDelete: Restrict)
  workerId     String                @map("worker_id")
  worker       People                @relation(fields: [workerId], references: [id], onDelete: Restrict)
  assignmentId String?               @map("assignment_id")
  assignment   TaskWorkerAssignments? @relation(fields: [assignmentId], references: [id], onDelete: SetNull)

  // Progress data
  amountCompleted      Float   @map("amount_completed") // e.g., 5.5 linear meters
  additionalAttributes String? @map("additional_attributes") // e.g., "room A", "north wall"

  // Status stamp (used by worker)
  status TaskStatus @map("status")

  // Material consumption and loss
  materialConsumptions MaterialConsumptions[]
  materialLosses       MaterialLosses[]

  // Photos (future feature)
  photos String[] @map("photos") // Array of S3 URLs

  // Validation
  validatedBy        String?          @map("validated_by") // Supervisor person ID
  validatedAt        DateTime?        @map("validated_at") @db.Timestamptz(6)
  validationStatus   ValidationStatus @default(PENDING) @map("validation_status")
  validationComments String?          @map("validation_comments")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([taskId])
  @@index([projectId])
  @@index([workerId])
  @@index([assignmentId])
  @@map("task_progress_updates")
}

model Materials {
  id            String         @id @default(cuid()) @map("id")
  name          String         @map("name") // e.g., "Adhesive", "Bricks"
  nameEs        String?        @map("name_es") // Spanish name
  description   String?        @map("description")
  unit          String         @map("unit") // e.g., "cubic centimeters", "units", "liters"
  unitCost      Decimal?       @map("unit_cost") @db.Decimal(12, 2) // Cost per unit
  minStockLevel Float?         @map("min_stock_level") // Minimum stock level for reorder alerts
  maxStockLevel Float?         @map("max_stock_level") // Maximum stock level for storage optimization
  currentStock  Float          @default(0) @map("current_stock") // Current available stock
  status        MaterialStatus @default(ACTIVE) @map("status")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relationships
  projectMaterials   ProjectMaterials[]
  consumptions       MaterialConsumptions[]
  losses             MaterialLosses[]
  inventoryMovements InventoryMovements[]
  reorderRequests    ReorderRequests[]
  worklogUsage       WorklogMaterialUsage[]

  @@map("materials")
}

// Assignment Tables
model TaskProjectAssignments {
  id        String   @id @default(cuid()) @map("id")
  taskId    String   @map("task_id")
  task      Tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  projectId String   @map("project_id")
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Assignment tracking
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamptz(6)
  assignedBy String   @map("assigned_by") // Person ID who assigned the task to project

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([taskId, projectId])
  @@index([taskId])
  @@index([projectId])
  @@map("task_project_assignments")
}

model TaskWorkerAssignments {
  id        String   @id @default(cuid()) @map("id")
  taskId    String   @map("task_id")
  task      Tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  projectId String   @map("project_id")
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workerId  String   @map("worker_id")
  worker    People   @relation(fields: [workerId], references: [id], onDelete: Cascade)

  // Assignment tracking
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamptz(6)
  assignedBy String   @map("assigned_by") // Person ID who assigned the task to worker

  // Progress updates for this assignment
  progressUpdates TaskProgressUpdates[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([taskId, projectId, workerId])
  @@index([taskId])
  @@index([projectId])
  @@index([workerId])
  @@map("task_worker_assignments")
}

model ProjectMaterials {
  id         String    @id @default(cuid()) @map("id")
  projectId  String    @map("project_id")
  project    Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  materialId String    @map("material_id")
  material   Materials @relation(fields: [materialId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([projectId, materialId])
  @@index([projectId])
  @@index([materialId])
  @@map("project_materials")
}

model MaterialConsumptions {
  id                   String               @id @default(cuid()) @map("id")
  taskProgressUpdateId String?              @map("task_progress_update_id") // Optional for manual tracking
  taskProgressUpdate   TaskProgressUpdates? @relation(fields: [taskProgressUpdateId], references: [id], onDelete: SetNull)
  materialId           String               @map("material_id")
  material             Materials            @relation(fields: [materialId], references: [id], onDelete: Restrict)
  projectId            String?              @map("project_id") // For project-level tracking
  project              Projects?            @relation(fields: [projectId], references: [id], onDelete: SetNull)

  quantity   Float    @map("quantity") // Amount consumed
  type       String   @default("CONSUMPTION") @map("type") // CONSUMPTION or LOSS
  notes      String?  @map("notes") // Additional notes
  recordedAt DateTime @default(now()) @map("recorded_at") @db.Timestamptz(6)
  recordedBy String?  @map("recorded_by") // Person ID who recorded this

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([materialId])
  @@index([projectId])
  @@index([taskProgressUpdateId])
  @@map("material_consumptions")
}

model MaterialLosses {
  id                   String              @id @default(cuid()) @map("id")
  taskProgressUpdateId String              @map("task_progress_update_id")
  taskProgressUpdate   TaskProgressUpdates @relation(fields: [taskProgressUpdateId], references: [id], onDelete: Cascade)
  materialId           String              @map("material_id")
  material             Materials           @relation(fields: [materialId], references: [id], onDelete: Cascade)

  quantity Float @map("quantity") // Amount lost/wasted

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([materialId])
  @@index([taskProgressUpdateId])
  @@map("material_losses")
}

// Inventory Management Models
model InventoryMovements {
  id         String    @id @default(cuid()) @map("id")
  materialId String    @map("material_id")
  material   Materials @relation(fields: [materialId], references: [id], onDelete: Restrict)

  // Movement details
  type      InventoryMovementType @map("type")
  quantity  Float                 @map("quantity") // Positive for additions, negative for reductions
  unitCost  Decimal?              @map("unit_cost") @db.Decimal(12, 2) // Cost at the time of movement
  totalCost Decimal?              @map("total_cost") @db.Decimal(14, 2) // Total cost of this movement

  // Reference information
  reference String? @map("reference") // Purchase order, invoice, etc.
  notes     String? @map("notes") // Additional notes

  // Person tracking
  recordedBy String? @map("recorded_by") // Person ID who recorded this movement

  // Timestamps
  recordedAt DateTime @default(now()) @map("recorded_at") @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("inventory_movements")
}

model ReorderRequests {
  id         String    @id @default(cuid()) @map("id")
  materialId String    @map("material_id")
  material   Materials @relation(fields: [materialId], references: [id], onDelete: Restrict)

  // Request details
  requestedQuantity Float    @map("requested_quantity")
  requestedBy       String   @map("requested_by") // Person ID who requested reorder
  requestedAt       DateTime @default(now()) @map("requested_at") @db.Timestamptz(6)

  // Approval workflow
  approvedBy      String?   @map("approved_by") // Person ID who approved
  approvedAt      DateTime? @map("approved_at") @db.Timestamptz(6)
  rejectedBy      String?   @map("rejected_by") // Person ID who rejected
  rejectedAt      DateTime? @map("rejected_at") @db.Timestamptz(6)
  rejectionReason String?   @map("rejection_reason")

  // Order tracking
  orderNumber String?   @map("order_number") // Purchase order number
  orderedAt   DateTime? @map("ordered_at") @db.Timestamptz(6)
  receivedAt  DateTime? @map("received_at") @db.Timestamptz(6)

  // Status
  status ReorderRequestStatus @default(PENDING) @map("status")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("reorder_requests")
}

// Enums for Task Management
enum TaskCategoryStatus {
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  OBSTACLE_PERMIT
  OBSTACLE_DECISION
  OBSTACLE_INSPECTION
  OBSTACLE_MATERIALS
  OBSTACLE_EQUIPMENT
  OBSTACLE_WEATHER
  OBSTACLE_OTHER
}

enum ValidationStatus {
  PENDING
  VALIDATED
  REJECTED
}

enum MaterialStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum InventoryMovementType {
  PURCHASE
  SALE
  TRANSFER
  ADJUSTMENT
  LOSS
  RETURN
}

enum ReorderRequestStatus {
  PENDING
  APPROVED
  REJECTED
  ORDERED
  RECEIVED
  CANCELLED
}
