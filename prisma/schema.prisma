// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String?    // Optional password field for authentication
  role      Role       @default(WORKER)
  // User is permanent - no deletion, only status changes
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  userTenants  UserTenant[]
  userTeams    UserTeam[]
  userProjects UserProject[]
  workLogs     WorkLog[]
  workerAssignments TaskWorkerAssignment[]
  progressUpdates TaskProgressUpdate[]

  // Audit trail
  auditLogs AuditLog[]
  Company   Company?   @relation(fields: [companyId], references: [id])
  companyId String?

  @@map("User")
}

model Company {
  id        String        @id @default(cuid())
  name      String
  nameEs    String?
  slug      String        @unique // ADD THIS LINE
  status    CompanyStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations (keep existing)
  users      User[]
  projects   Project[]
  workLogs   WorkLog[]
  Team       Team[]
  UserTenant UserTenant[]

  @@map("companies")
}

model Team {
  id          String     @id @default(cuid())
  name        String
  nameEs      String? // Spanish team name
  description String?
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id])
  status      TeamStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relationships
  users    UserTeam[]
  projects ProjectTeam[]

  @@map("Team")
}

model Project {
  id            String        @id @default(cuid())
  name          String
  nameEs        String? // Spanish project name
  description   String?
  descriptionEs String? // Spanish project description
  companyId     String
  company       Company       @relation(fields: [companyId], references: [id])
  status        ProjectStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  users    UserProject[]
  teams    ProjectTeam[]
  workLogs WorkLog[]
  taskAssignments TaskProjectAssignment[]
  workerAssignments TaskWorkerAssignment[]
  materials ProjectMaterial[]
  progressUpdates TaskProgressUpdate[]
  materialConsumptions MaterialConsumption[]

  @@map("Project")
}

// Junction table for User-Company relationships with time tracking
model UserTenant {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  // Time tracking
  startDate DateTime  @default(now())
  endDate   DateTime? // null = currently active

  // Status
  status UserTenantStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyId, startDate])
  @@map("UserTenant")
}

// Junction table for User-Team relationships
model UserTeam {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  // Time tracking
  startDate DateTime  @default(now())
  endDate   DateTime? // null = currently active

  // Status
  status UserTeamStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, teamId, startDate])
  @@map("UserTeam")
}

// Junction table for User-Project relationships
model UserProject {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  // Time tracking
  startDate DateTime  @default(now())
  endDate   DateTime? // null = currently active

  // Status
  status UserProjectStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId, startDate])
  @@map("UserProject")
}

// Junction table for Project-Team relationships
model ProjectTeam {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  teamId    String
  team      Team    @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())

  @@unique([projectId, teamId])
  @@map("ProjectTeam")
}

model WorkLog {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  projectId      String
  project        Project   @relation(fields: [projectId], references: [id])
  
  // Original fields
  clockIn        DateTime
  clockOut       DateTime?
  location       String? // GPS coordinates
  tasksCompleted String // JSON array of tasks
  materialsUsed  String // JSON array of materials
  photos         String[] // Array of photo URLs
  notes          String?
  notesEs        String? // Spanish notes
  approved       Boolean   @default(false)
  approvedBy     String?
  approvedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Company        Company?  @relation(fields: [companyId], references: [id])
  companyId      String?

  @@map("WorkLog")
}

// Audit trail for all changes
model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String // CREATE, UPDATE, DELETE, ASSIGN, UNASSIGN
  entityType String // USER, COMPANY, TEAM, PROJECT, etc.
  entityId   String
  oldValues  String? // JSON of old values
  newValues  String? // JSON of new values
  createdAt  DateTime @default(now())

  @@map("AuditLog")
}

enum Role {
  WORKER
  SUPERVISOR
  ADMIN
  SUPERUSER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum TeamStatus {
  ACTIVE
  INACTIVE
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum UserTenantStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum UserTeamStatus {
  ACTIVE
  INACTIVE
}

enum UserProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

// Universal Task Management Models (no company/project dependencies)
model TaskCategory {
  id          String   @id @default(cuid())
  name        String   // e.g., "Sello de juntas"
  nameEs      String?  // Spanish name
  description String?
  status      TaskCategoryStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tasks Task[]

  @@map("TaskCategory")
}

model Task {
  id          String   @id @default(cuid())
  name        String   // Universal task name
  description String?
  categoryId  String
  category    TaskCategory @relation(fields: [categoryId], references: [id])
  
  // Progress tracking
  progressUnit String  // e.g., "linear meters", "square meters", "units"
  
  // Universal tasks have no status - they just exist
  
  // Assignment relationships
  projectAssignments TaskProjectAssignment[]
  workerAssignments TaskWorkerAssignment[]
  
  // Progress updates
  progressUpdates TaskProgressUpdate[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Task")
}



model TaskProgressUpdate {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  workerId  String
  worker    User     @relation(fields: [workerId], references: [id])
  assignmentId String
  assignment TaskWorkerAssignment @relation(fields: [assignmentId], references: [id])
  
  // Progress data
  amountCompleted Float    // e.g., 5.5 linear meters
  additionalAttributes String? // e.g., "room A", "north wall"
  
  // Status stamp (used by worker)
  status      TaskStatus
  
  // Material consumption and loss
  materialConsumptions MaterialConsumption[]
  materialLosses       MaterialLoss[]
  
  // Photos (future feature)
  photos     String[] // Array of S3 URLs
  
  // Validation
  validatedBy    String?  // Supervisor user ID
  validatedAt    DateTime?
  validationStatus ValidationStatus @default(PENDING)
  validationComments String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("TaskProgressUpdate")
}

model Material {
  id          String   @id @default(cuid())
  name        String   // e.g., "Adhesive", "Bricks"
  nameEs      String?  // Spanish name
  description String?
  unit        String   // e.g., "cubic centimeters", "units", "liters"
  unitCost    Float?   // Cost per unit
  minStockLevel Float? // Minimum stock level for reorder alerts
  maxStockLevel Float? // Maximum stock level for storage optimization
  currentStock Float   @default(0) // Current available stock
  status      MaterialStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  projectMaterials ProjectMaterial[]
  consumptions  MaterialConsumption[]
  losses        MaterialLoss[]
  inventoryMovements InventoryMovement[]
  reorderRequests   ReorderRequest[]

  @@map("Material")
}

// Assignment Tables
model TaskProjectAssignment {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  
  // Assignment tracking
  assignedAt DateTime @default(now())
  assignedBy String   // User ID who assigned the task to project
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([taskId, projectId])
  @@map("TaskProjectAssignment")
}

model TaskWorkerAssignment {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  workerId  String
  worker    User     @relation(fields: [workerId], references: [id])
  
  // Assignment tracking
  assignedAt DateTime @default(now())
  assignedBy String   // User ID who assigned the task to worker
  
  // Progress updates for this assignment
  progressUpdates TaskProgressUpdate[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([taskId, projectId, workerId])
  @@map("TaskWorkerAssignment")
}

model ProjectMaterial {
  id         String   @id @default(cuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  materialId String
  material   Material @relation(fields: [materialId], references: [id])

  createdAt  DateTime @default(now())

  @@unique([projectId, materialId])
  @@map("ProjectMaterial")
}

model MaterialConsumption {
  id                    String   @id @default(cuid())
  taskProgressUpdateId  String?  // Optional for manual tracking
  taskProgressUpdate    TaskProgressUpdate? @relation(fields: [taskProgressUpdateId], references: [id])
  materialId            String
  material              Material @relation(fields: [materialId], references: [id])
  projectId             String?  // For project-level tracking
  project               Project? @relation(fields: [projectId], references: [id])

  quantity              Float    // Amount consumed
  type                  String   @default("CONSUMPTION") // CONSUMPTION or LOSS
  notes                 String?  // Additional notes
  recordedAt            DateTime @default(now())
  recordedBy            String?  // User ID who recorded this

  createdAt             DateTime @default(now())

  @@map("MaterialConsumption")
}

model MaterialLoss {
  id                    String   @id @default(cuid())
  taskProgressUpdateId  String
  taskProgressUpdate    TaskProgressUpdate @relation(fields: [taskProgressUpdateId], references: [id])
  materialId            String
  material              Material @relation(fields: [materialId], references: [id])
  
  quantity              Float    // Amount lost/wasted
  
  createdAt             DateTime @default(now())

  @@map("MaterialLoss")
}

// Inventory Management Models
model InventoryMovement {
  id          String   @id @default(cuid())
  materialId  String
  material    Material @relation(fields: [materialId], references: [id])
  
  // Movement details
  type        InventoryMovementType
  quantity    Float    // Positive for additions, negative for reductions
  unitCost    Float?   // Cost at the time of movement
  totalCost   Float?   // Total cost of this movement
  
  // Reference information
  reference   String?  // Purchase order, invoice, etc.
  notes       String?  // Additional notes
  
  // User tracking
  recordedBy  String?  // User ID who recorded this movement
  
  // Timestamps
  recordedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("InventoryMovement")
}

model ReorderRequest {
  id          String   @id @default(cuid())
  materialId  String
  material    Material @relation(fields: [materialId], references: [id])
  
  // Request details
  requestedQuantity Float
  requestedBy      String   // User ID who requested reorder
  requestedAt      DateTime @default(now())
  
  // Approval workflow
  approvedBy       String?  // User ID who approved
  approvedAt       DateTime?
  rejectedBy       String?  // User ID who rejected
  rejectedAt       DateTime?
  rejectionReason  String?
  
  // Order tracking
  orderNumber      String?  // Purchase order number
  orderedAt        DateTime?
  receivedAt       DateTime?
  
  // Status
  status           ReorderRequestStatus @default(PENDING)
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("ReorderRequest")
}

// Enums for Task Management
enum TaskCategoryStatus {
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  OBSTACLE_PERMIT
  OBSTACLE_DECISION
  OBSTACLE_INSPECTION
  OBSTACLE_MATERIALS
  OBSTACLE_EQUIPMENT
  OBSTACLE_WEATHER
  OBSTACLE_OTHER
}



enum ValidationStatus {
  PENDING
  VALIDATED
  REJECTED
}

enum MaterialStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum InventoryMovementType {
  PURCHASE
  SALE
  TRANSFER
  ADJUSTMENT
  LOSS
  RETURN
}

enum ReorderRequestStatus {
  PENDING
  APPROVED
  REJECTED
  ORDERED
  RECEIVED
  CANCELLED
}
