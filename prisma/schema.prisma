// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String?    // Optional password field for authentication
  role      Role       @default(WORKER)
  // User is permanent - no deletion, only status changes
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  userTenants  UserTenant[]
  userTeams    UserTeam[]
  userProjects UserProject[]
  workLogs     WorkLog[]

  // Audit trail
  auditLogs AuditLog[]
  Company   Company?   @relation(fields: [companyId], references: [id])
  companyId String?

  @@map("User")
}

model Company {
  id        String        @id @default(cuid())
  name      String
  nameEs    String?
  slug      String        @unique // ADD THIS LINE
  status    CompanyStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations (keep existing)
  users      User[]
  projects   Project[]
  workLogs   WorkLog[]
  Team       Team[]
  UserTenant UserTenant[]

  @@map("companies")
}

model Team {
  id          String     @id @default(cuid())
  name        String
  nameEs      String? // Spanish team name
  description String?
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id])
  status      TeamStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relationships
  users    UserTeam[]
  projects ProjectTeam[]

  @@map("Team")
}

model Project {
  id            String        @id @default(cuid())
  name          String
  nameEs        String? // Spanish project name
  description   String?
  descriptionEs String? // Spanish project description
  companyId     String
  company       Company       @relation(fields: [companyId], references: [id])
  status        ProjectStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  users    UserProject[]
  teams    ProjectTeam[]
  workLogs WorkLog[]

  @@map("Project")
}

// Junction table for User-Company relationships with time tracking
model UserTenant {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  // Time tracking
  startDate DateTime  @default(now())
  endDate   DateTime? // null = currently active

  // Status
  status UserTenantStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyId, startDate])
  @@map("UserTenant")
}

// Junction table for User-Team relationships
model UserTeam {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  // Time tracking
  startDate DateTime  @default(now())
  endDate   DateTime? // null = currently active

  // Status
  status UserTeamStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, teamId, startDate])
  @@map("UserTeam")
}

// Junction table for User-Project relationships
model UserProject {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  // Time tracking
  startDate DateTime  @default(now())
  endDate   DateTime? // null = currently active

  // Status
  status UserProjectStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId, startDate])
  @@map("UserProject")
}

// Junction table for Project-Team relationships
model ProjectTeam {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  teamId    String
  team      Team    @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())

  @@unique([projectId, teamId])
  @@map("ProjectTeam")
}

model WorkLog {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  projectId      String
  project        Project   @relation(fields: [projectId], references: [id])
  
  // Original fields
  clockIn        DateTime
  clockOut       DateTime?
  location       String? // GPS coordinates
  tasksCompleted String // JSON array of tasks
  materialsUsed  String // JSON array of materials
  photos         String[] // Array of photo URLs
  notes          String?
  notesEs        String? // Spanish notes
  approved       Boolean   @default(false)
  approvedBy     String?
  approvedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Company        Company?  @relation(fields: [companyId], references: [id])
  companyId      String?

  @@map("WorkLog")
}

// Audit trail for all changes
model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String // CREATE, UPDATE, DELETE, ASSIGN, UNASSIGN
  entityType String // USER, COMPANY, TEAM, PROJECT, etc.
  entityId   String
  oldValues  String? // JSON of old values
  newValues  String? // JSON of new values
  createdAt  DateTime @default(now())

  @@map("AuditLog")
}

enum Role {
  WORKER
  SUPERVISOR
  ADMIN
  SUPERUSER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum TeamStatus {
  ACTIVE
  INACTIVE
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum UserTenantStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum UserTeamStatus {
  ACTIVE
  INACTIVE
}

enum UserProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}
